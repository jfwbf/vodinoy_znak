# –°—É —Ç–∞“£–±–∞—Å—ã–Ω –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ñ–∞–π–ª“ì–∞ –µ–Ω–≥—ñ–∑—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def embed_watermark(input_file, output_file, watermark_text):

    binary_watermark = ''.join(format(ord(char), '08b') for char in watermark_text)

    # 0 -> –±–æ—Å –æ—Ä—ã–Ω, 1 -> —Ç–∞–±—É–ª—è—Ü–∏—è
    stego_watermark = ''.join(' ' if bit == '0' else '\t' for bit in binary_watermark)

    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content + '\n' + stego_watermark)

    print("–°—É —Ç–∞“£–±–∞—Å—ã —Ñ–∞–π–ª“ì–∞ –µ–Ω–≥—ñ–∑—ñ–ª–¥—ñ ‚úÖ")

# –°—É —Ç–∞“£–±–∞—Å—ã–Ω –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ñ–∞–π–ª–¥–∞–Ω —à—ã“ì–∞—Ä—ã–ø –æ“õ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def extract_watermark(stego_file):
    with open(stego_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    # –°–æ“£“ì—ã –∂–æ–ª–¥–∞ —Å—É —Ç–∞“£–±–∞—Å—ã –±–∞—Ä –¥–µ–ø –µ—Å–µ–ø—Ç–µ–π–º—ñ–∑
    watermark_line = lines[-1]

    # 1. –°–∏–º–≤–æ–ª–¥–∞—Ä–¥—ã –±–∏—Ç—Ç–µ—Ä–≥–µ –∞—É—ã—Å—Ç—ã—Ä—É
    binary_data = ''.join('0' if char == ' ' else '1' for char in watermark_line if char in [' ', '\t'])

    # 2. 8-–±–∏—Ç—Ç—ñ–∫ –±–ª–æ–∫—Ç–∞—Ä“ì–∞ –±”©–ª—ñ–ø, —Å–∏–º–≤–æ–ª–¥–∞—Ä“ì–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—É
    watermark_text = ''.join(chr(int(binary_data[i:i+8], 2)) for i in range(0, len(binary_data), 8))

    print("üîç –°—É —Ç–∞“£–±–∞—Å—ã —Ç–∞–±—ã–ª–¥—ã:", watermark_text)
    return watermark_text

# –ú—ã—Å–∞–ª:
input_file = 'orig_text.txt'         # –ë–∞—Å—Ç–∞–ø“õ—ã –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ñ–∞–π–ª
output_file = 'watermarked.txt'     # –°—É —Ç–∞“£–±–∞—Å—ã –µ–Ω–≥—ñ–∑—ñ–ª–≥–µ–Ω —Ñ–∞–π–ª
watermark_text = 'ILYAS2025'        # –°—É —Ç–∞“£–±–∞—Å—ã (–º—ã—Å–∞–ª)

# –°—É —Ç–∞“£–±–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—É
embed_watermark(input_file, output_file, watermark_text)

# –°—É —Ç–∞“£–±–∞—Å—ã–Ω —à—ã“ì–∞—Ä—ã–ø –æ“õ—É
extract_watermark(output_file)


–î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ö–û–î –ù–ò–ñ–ï –ù–ê–•–û–î–ò–¢–°–Ø. –°–û–í–ï–¢–£–Æ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–ù–ê–ß–ê–õ–ê –£–ë–†–ê–¢–¨ –ù–ò–ñ–ù–£–Æ –ß–ê–°–¢–¨ –ü–û–¢–û–ú –ó–ê–ü–£–°–¢–ò–¢–¨ :

import hashlib

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö—ç—à–∞ —Ñ–∞–π–ª–∞
def calculate_hash(file_path):
    sha256_hash = hashlib.sha256()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA-256
    with open(file_path, "rb") as f:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 4kB
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
original_file = 'orig_text.txt'         # –ë–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
watermarked_file = 'watermarked.txt'   # –° –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à-—Å—É–º–º
original_hash = calculate_hash(original_file)
watermarked_hash = calculate_hash(watermarked_file)

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö—ç—à–µ–π
print(f"–•—ç—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {original_hash}")
print(f"–•—ç—à —Ñ–∞–π–ª–∞ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º: {watermarked_hash}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ —Ö—ç—à–∏
if original_hash == watermarked_hash:
    print("–§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã (–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω).")
else:
    print("–§–∞–π–ª—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
